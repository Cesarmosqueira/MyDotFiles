import _ from 'lodash';

const preprocessors = {
    click,
    label,
};

/**
 * Callback when the menu item is clicked
 * @param {function} item.click
 * @param {string} item.event - If specified, item.click will be replaced with a function to emit plug event
 */
function click(value, item, type) {
    if (!_.isEmpty(item.event)) {
        item.click = (menuItem, browserWindow, event) => {
            plug.emit(`plug.menu.${type}.${item.event}`, event, menuItem, browserWindow);
        }
    }
}

/**
 * Label of the menu item
 * @param {string | function} item.label - Can use function for label, the return value will be used
 */
function label(value, item, type) {
    if (_.isFunction(value)) {
        item.label = value();
    }
}

export function preprocessItem(item, type) {
    for (const propertyName in preprocessors) {
        preprocessors[propertyName](item[propertyName], item, type);
    }

    if (item.submenu) {
        for (const subitem of item.submenu) {
            preprocessItem(subitem, type);
        }
    }
}

export default function(template, type) {
    const processedTemplate = _.cloneDeep(template);

    for (const item of processedTemplate) {
        preprocessItem(item, type);
    }

    return processedTemplate;
};