import electron from 'electron';
import is from 'electron-is';
import _ from 'lodash';
import debug from 'debug';
import preprocess, { preprocessItem } from './templatePreprocessor';

const log = debug(`plug:menu`);
const error = debug(`plug:menu:error`);

/* Represent a plug menu */
export default class PlugMenu {
    /**
     * Create a plug menu
     * @constructor
     * @param {string} type
     */
    constructor(type) {
        this.type = type;
    }

    /**
     * Use another template to build the menu
     * @param {Object.<MenuItem>[]} template - Used to build menu
     */
    use(template) {
        this.template = template;
        this.renderMenu();
    }

    /**
     * Prepare the menu
     * @param {Object.<MenuItem>[]} template - Used to build menu
     * @param {function} render - Method to render the built menu
     */
    bootstrap(template, render) {
        this.template = template;
        this.render = render;

        plug.ready(this.renderMenu.bind(this));
        plug.on('plug.locale.change', this.renderMenu.bind(this));
    }

    /**
     * Render the built menu
     */
    renderMenu() {
        this.menu = this.buildMenu();
        this.render(this.menu);
    }

    /**
     * Build menu from template
     */
    buildMenu() {
        const processedTemplate = preprocess(this.template, this.type);

        return electron.Menu.buildFromTemplate(processedTemplate);
    }

    /**
     * Add a listener to be invoked when a menu item with "event" property is clicked
     * @param {string} [eventName] - The event to be listened. If not provided, listen to any event
     * @param {function} callback
     */
    onMenuClick(eventName, callback) {
        if (_.isString(eventName)) {
            plug.subscribe(`plug.menu.${this.type}.${eventName}`, callback);
        }
        else if (_.isFunction(eventName)){
            callback = eventName;
            plug.subscribe(`plug.menu.${this.type}`, callback);
        }
    }

    /**
     * Search menu item by id
     * @param {string} id
     * @return {Object | boolean} - Return menu item found. If not found, return false
     */
    getMenuItemById(id) {
        const menuItemFound = this.getMenuByIdFromMenu(id, this.template);

        return menuItemFound || false;
    }

    /**
     * Update menu item by id
     * @param {string} id
     * @param {Object} updates
     */
    updateMenuItemById(id, updates) {
        const menuItemFound = this.getMenuByIdFromMenu(id, this.template);

        for (const property in updates) {
            menuItemFound[property] = updates[property];
        }

        this.renderMenu();
    }

    /* Search menu item iteratively */
    getMenuByIdFromMenu(id, menu) {
        for (const item of menu) {
            if (id === item.id) {
                return item;
            }

            if (menu.submenu) {
                const result = this.getMenuByIdFromMenu(id, menu.submenu);

                if (result) {
                    return result;
                }
            }
        }
    }
};