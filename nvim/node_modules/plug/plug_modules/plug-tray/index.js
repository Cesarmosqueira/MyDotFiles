import electron from 'electron';
import PlugModule from 'plug-module';
import path from 'path';
import _ from 'lodash';
import PlugMenu from '../plug-menu';
import { appPath, isPathAbsolute } from '../plug-utils';

const mod = new PlugModule('trayMenu');
const trayMenu = new PlugMenu('tray');
let tray;
let menuItems;
let trayTitle;
let trayTooltip;
let trayImage;

mod.createMethod('useTrayMenu', trayMenu.use.bind(trayMenu));
mod.createMethod('getTrayMenuItemById', trayMenu.getMenuItemById.bind(trayMenu));
mod.createMethod('updateTrayMenuItemById', trayMenu.updateMenuItemById.bind(trayMenu));
mod.createMethod('showTray', showTray);
mod.createMethod('hideTray', hideTray);
mod.addMethod('onTrayMenuClick', trayMenu.onMenuClick.bind(trayMenu));
mod.injectMethodsToGlobal();

mod.addMainBootstrapper(bootstrap);

mod.createMethod('getTrayTitle', () => trayTitle);
mod.createMethod('updateTrayTitle', updateTrayTitle);
mod.createMethod('getTrayTooltip', () => trayTooltip);
mod.createMethod('updateTrayTooltip', updateTrayTooltip);
mod.createMethod('getTrayImage', () => trayImage);
mod.createMethod('updateTrayImage', updateTrayImage);
mod.injectGetterAndSetterToGlobal('trayTitle', mod.methods.getTrayTitle, mod.methods.updateTrayTitle);
mod.injectGetterAndSetterToGlobal('trayTooltip', mod.methods.getTrayTooltip, mod.methods.updateTrayTooltip);
mod.injectGetterAndSetterToGlobal('trayImage', mod.methods.getTrayImage, mod.methods.updateTrayImage);

function showTray() {
    tray && !tray.isDestroyed() && tray.destroy();
    tray = new electron.Tray(processTrayImage(trayImage));
    trayTitle && tray.setTitle(processTrayTitleOrTooltip(trayTitle));
    trayTooltip && tray.setToolTip(processTrayTitleOrTooltip(trayTooltip));
    tray.setContextMenu(menuItems);
}

function hideTray() {
    tray && !tray.isDestroyed() && tray.destroy();
}

function updateTrayTitle(title) {
    trayTitle = title;
    tray && tray.setTitle(processTrayTitleOrTooltip(title));
}

function updateTrayTooltip(tooltip) {
    trayTooltip = tooltip;
    tray && tray.setToolTip(processTrayTitleOrTooltip(tooltip));
}

function updateTrayImage(image) {
    trayImage = image;
    tray && tray.setImage(processTrayImage(image));
}

function processTrayTitleOrTooltip(value) {
    return _.isFunction(value) ? value() : value;
}

function processTrayImage(image) {
    return _.isString(image) && !isPathAbsolute(image)
        ? path.join(appPath, 'config', image)
        : image;
}

function bootstrap(config) {
    trayTitle = config.tray.title;
    trayTooltip = config.tray.tooltip;
    trayImage = config.tray.image;

    trayMenu.bootstrap(config.tray.template, menu => menuItems = menu);

    plug.ready(() => {
        config.tray.show && showTray();
    });

    plug.on('plug.locale.change', () => {
        _.isFunction(trayTitle) && updateTrayTitle(trayTitle);
        _.isFunction(trayTooltip) && updateTrayTooltip(trayTooltip);
    });
}

export default mod.exportModule();





