import _ from 'lodash';
import debug from 'debug';

const log = debug('plug:win');

function bindWebContentsMethods(win) {
    const methodsToBind = [
        'canGoBack',
        'canGoForward',
        'canGoToOffset',
        'clearHistory',
        'goBack',
        'goForward',
        'goToIndex',
        'goToOffset',
        'setAudioMuted',
        'isAudioMuted',
        'setZoomFactor',
        'getZoomFactor',
        'setZoomLevel',
        'getZoomLevel',
        'setVisualZoomLevelLimits',
        'setLayoutZoomLevelLimits',
        'undo',
        'redo',
        'cut',
        'copy',
        'copyImageAt',
        'paste',
        'pasteAndMatchStyle',
        'delete',
        'selectAll',
        'unselect',
        'replace',
        'replaceMisspelling',
        'capturePage',
        'getPrinters',
        'print',
        'printToPDF',
        'openDevTools',
        'closeDevTools',
        'isDevToolsOpened',
        'isDevToolsFocused',
        'toggleDevTools',
        'sendInputEvent',
        'startDrag',
        'savePage',
    ];

    for (let method of methodsToBind) {
        win[method] = (...args) => win.webContents[method](...args);
    }
}

function bindSystemEvents(win) {
    const eventsToBind = [
        'close',
        'closed',
        'unresponsive',
        'responsive',
        'show',
        'hide',
        'ready-to-show',
        'maximize',
        'unmaximize',
        'minimize',
        'restore',
        'move',
        'enter-full-screen',
        'leave-full-screen',
        ['enter-html-full-screen', 'enter-full-screen'],
        ['leave-html-full-screen', 'leave-full-screen'],
    ];

    const webContentsEventsToBind = [
        'did-finish-load',
        'did-fail-load',
        'dom-ready',
        'new-window',
        'crashed',
        'destroyed',
        'media-started-playing',
        'media-paused',
        'context-menu',
    ];

    for (let item of eventsToBind) {
        _.isString(item)
            ? win.on(item, (event, ...args) => plug.emit(`plug.window.${item}`, event, win, ...args))
            : win.on(item[0], (event, ...args) => plug.emit(`plug.window.${item[1]}`, event, win, ...args));
    }

    for (let item of webContentsEventsToBind) {
        win.webContents.on(item, (event, ...args) => plug.emit(`plug.window.${item}`, event, win, ...args));
    }
}

function postCreateWindow(win, name, windowStore) {
    win.on('closed', () => {
        log(`window "${name}" is closed`);
        windowStore.delete(name);
    });
}

export default function(win, name, windowStore) {
    bindWebContentsMethods(win);
    bindSystemEvents(win);
    postCreateWindow(win, name, windowStore);
}