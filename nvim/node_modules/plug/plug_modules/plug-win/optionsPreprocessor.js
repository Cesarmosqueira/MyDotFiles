import _ from 'lodash';
import electron from 'electron';
import { format } from 'url';

const pagePath = __env__ === 'dev'
    ? 'http://localhost:9000'
    : format({ pathname: `${plug.appPath}`, protocol: 'file:', slashes: true });

const preprocessors = {
    url,
    width,
    height,
    x,
    y,
    show,
};

/**
 * Use to locate the html to load.
 * @param {string} options.url
 * @param {boolean} options.fromPlug - If provided, use html in templates folder instead of renderer folder
 */
function url(value, options) {
    if (_.isEmpty(value)) {
        const directory = options.fromPlug ? 'templates' : 'renderer';
        const url = `${pagePath}/${directory}/${options._name}/index.html`;

        options.url = url;
    }
}

/**
 * Ignore the value provided first and hide the window anyway. If set to true, show the window when ready
 * @param {boolean} options.show
 */
function show(value, options) {
    options._show = value;
    options.show = false;
}

/**
 * Width of the window
 * @param {number | string} options.width - Support number or percentage
 * @param {number | string} options.left - Alias of x, The distance from left boundary of the primary screen
 * @param {number | string} options.right - The distance from right boundary of the primary screen
 */
function width(value, options) {
    if (!_.isEmpty(options.left) && !_.isEmpty(options.right)) {
        const left = checkPercentage(options.left, getScreenWidth());
        const right = checkPercentage(options.right, getScreenWidth());
        options.width = getScreenWidth() - left - right;
    }
    else {
        options.width = checkPercentage(options.width);
    }
}

/**
 * Height of the window
 * @param {number | string} options.height - Support number or percentage
 * @param {number | string} options.top - Alias of x, The distance from top boundary of the primary screen
 * @param {number | string} options.bottom - The distance from bottom boundary of the primary screen
 */
function height(value, options) {
    if (!_.isEmpty(options.top) && !_.isEmpty(options.bottom)) {
        const top = checkPercentage(options.top, getScreenHeight());
        const bottom = checkPercentage(options.bottom, getScreenHeight());
        options.height = getScreenHeight() - top - bottom;
    }
    else {
        options.height = checkPercentage(options.height);
    }
}

/**
 * X coordinate for the window
 * @param {number | string} options.x
 * @param {number | string} options.left - Alias of x, The distance from left boundary of the primary screen
 * @param {number | string} options.right - The distance from right boundary of the primary screen
 */
function x(value, options) {
    if (_.isNumber(options.left)) {
        options.x = checkPercentage(options.left, getScreenWidth());
    }
    else if (_.isNumber(options.right)) {
        const windowWidth = options.width || 800;
        const right = checkPercentage(options.right, getScreenWidth());
        const calculatedX = getScreenWidth() - right - windowWidth;

        options.x = calculatedX;
    }
    else {
        options.x = checkPercentage(x, getScreenWidth());
    }
}

/**
 * Y coordinate for the window
 * @param {number | string} options.y
 * @param {number | string} options.top - Alias of y, The distance from top boundary of the primary screen
 * @param {number | string} options.bottom - The distance from bottom boundary of the primary screen
 */
function y(value, options) {
    if (_.isNumber(options.top)) {
        options.y = checkPercentage(options.top, getScreenHeight());
    }
    else if (_.isNumber(options.bottom)) {
        const windowHeight = options.height || 600;
        const bottom = checkPercentage(options.bottom, getScreenHeight());
        const calculatedY = getScreenHeight() - bottom - windowHeight;

        options.y = calculatedY;
    }
    else {
        options.y = checkPercentage(y, getScreenHeight());
    }
}

function getScreenWidth() {
    return electron.screen.getPrimaryDisplay().size.width;
}

function getScreenHeight() {
    return electron.screen.getPrimaryDisplay().size.height;
}

function checkPercentage(percentage, total) {
    const isPercentage = _.isString(percentage) && _.endsWith(percentage, '%');

    return isPercentage ? _.round(parseInt(percentage) / 100 * total) : percentage;
}

export default function(options) {
    for (const optionName in preprocessors) {
        preprocessors[optionName](options[optionName], options);
    }
};