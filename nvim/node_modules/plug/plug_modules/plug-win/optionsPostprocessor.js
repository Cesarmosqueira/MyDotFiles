import _ from 'lodash';
import electron from 'electron';

const postprocessors = {
    _show,
    openDevTools,
    shortcut,
    blockOthers,
    openLinkInExternal,
    accessible,
}

/**
 * Whether show the window when it is ready
 * @param {boolean} options._show - Actual value for options.show
 */
function _show(value, options, win) {
    if (value !== false) {
        win.on('ready-to-show', win.show);
    }
}

/**
 * Whether show the developer tools
 * @param {boolean} options.openDevTools=false
 */
function openDevTools(value, options, win) {
    if (value) {
       win.webContents.openDevTools();
    }
}

/**
 * The shortcuts bind to this window
 * @param {Object.<Shortcut.eventName: Shortcut.accelerator>} options.shortcut
 * @param {string} Shortcut.eventName - Name of event to emit when the shortcut is triggered
 * @param {string} Shortcut.accelerator - Combination of keys to trigger the shortcut
 */
function shortcut(value, options, win) {
    if (_.isObject(value)) {
        for (const eventName in value) {
            plug.registerShortcut(eventName, value[eventName], win);
        }
    }
}

/**
 * Block other windows to be focused. Always bring current window to front
 * @param {boolean} options.blockOthers=false
 */
function blockOthers(value, options, win) {
    if (value) {
        const blocker = (event, winToFocus) => {
            if (winToFocus !== win) {
                event.preventDefault();
                win.show();
                win.focus();
            }
        };

        plug.on('plug.window.focus', blocker);
        win.on('close', () => plug.off('plug.window.focus', blocker));
    }
}

/**
 * Open all http or https links in external browser for this window
 * @param {boolean} options.openLinkInExternal=true
 */
function openLinkInExternal(value, options, win) {
    if (value !== false) {
        win.webContents.on('will-navigate', openAsExternal);
        win.webContents.on('new-window', openAsExternal);
    }
}

/**
 * Whether user can access window using plug api
 * @param {boolean} options.accessible=true
 */
function accessible(value, options, win, windowStore) {
    if (value !== false) {
        windowStore.set(options._name, win);
    }
}

function openAsExternal(event, url) {
    if (url.startsWith('http') && !url.startsWith('http://localhost:9000')) {
        event.preventDefault();
        electron.shell.openExternal(url);
    }
}

export default function(win, options, windowStore) {
    for (const optionName in postprocessors) {
        postprocessors[optionName](options[optionName], options, win, windowStore);
    }
};