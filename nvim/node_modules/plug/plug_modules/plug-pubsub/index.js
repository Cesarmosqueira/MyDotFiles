import PlugModule from 'plug-module';
import is from 'electron-is';
import electron from 'electron';
import { requireShared } from '../plug-utils';
import bindSystemEvents from './events';

const mod = new PlugModule('pubsub');
const { Pubsub, PubsubWithNativeEvent } = requireShared('plug-pubsub');
const defaultPubsub = new Pubsub('__DEFAULT__');
const plugPubsub = new PubsubWithNativeEvent('__PLUG__');
const api = {
    subscribe: chooseMethod('subscribe'),
    once: chooseMethod('once'),
    unsubscribe: chooseMethod('unsubscribe'),
    publish,
    clearAllSubscriptions: defaultPubsub.clearAllSubscriptions,
    Pubsub,
};

mod.addMethod(api);
mod.removeMethod('default');
mod.addMethodAlias('subscribe', 'on');
mod.addMethodAlias('unsubscribe', 'off');
mod.addMethodAlias('publish', 'emit');
mod.injectMethodsToGlobal();
mod.mainMethod(bindSystemEvents)();

function publish(eventName, ...args) {
    if (is.renderer()) {
        args.length === 0 && args.push({});
        args[0].sender = electron.remote.getCurrentWindow();
    }

    return chooseMethod('publish')(eventName, ...args);
}

function chooseMethod(methodName) {
    return (...args) => (isPlugEvent(args[0]) ? plugPubsub : defaultPubsub)[methodName](...args);
}

function isPlugEvent(eventName) {
    return eventName.startsWith('plug.');
}

export default mod.exportModule();

