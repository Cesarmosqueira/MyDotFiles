import debug from 'debug';
import electron from 'electron';
import _ from 'lodash';
import is from 'electron-is';

const log = debug(`plug:shortcut`);
const error = debug(`plug:shortcut:error`);
const shortcuts = {};

let globalShortcut;
let localShortcut;

if (is.main()) {
    globalShortcut = electron.globalShortcut;
    localShortcut = require('electron-localshortcut');
}

/**
 * Register a shortcut
 * @param {string} eventName
 * @param {string} accelerator
 * @param {string | Object} range - Could be 'global' or 'local', or a window instance.
 */
export function register(eventName, accelerator, range) {
    if (isRegistered(eventName)) {
        return error(`event "${accelerator}" has been registered`);
    }

    if (isRegistered(accelerator)) {
        return error(`accelerator "${accelerator}" has been registered`);
    }

    log(`registering shortcut "${eventName}"`);
    shortcuts[eventName] = { eventName, accelerator, range };

    const callback = () => plug.emit(`plug.shortcut.${eventName}`, {}, accelerator, range);
    const isGlobal = range === 'global' || range === 'g';
    const isLocal = range === 'local' || range === 'l';
    const isWindow = _.isObject(range);

    if (isGlobal) {
        globalShortcut.register(accelerator, callback);
    }
    else if (isLocal) {
        localShortcut.register(accelerator, callback);
    }
    else if (isWindow) {
        localShortcut.unregister(range, accelerator, callback);
    }
}

/**
 * Check if an event name or accelerator is registered as a shortcut
 * @param {string} eventNameOrAccelerator
 * @return {Object | boolean} - Return shortcut info if registered, otherwise false
 */
export function isRegistered(eventNameOrAccelerator) {
    return shortcuts[eventNameOrAccelerator]
        || Object.values(shortcuts).find(item => item.accelerator === eventNameOrAccelerator)
        || false;
}

/**
 * Unregister a shortcut by event name or accelerator
 * @param {string} eventNameOrAccelerator
 */
export function unregister(eventNameOrAccelerator) {
    const shortcut = isRegistered(eventNameOrAccelerator);

    if (!shortcut) {
        return error(`"${eventNameOrAccelerator}" has not been registered yet`);;
    }

    const isGlobal = shortcut.range === 'global' || shortcut.range === 'g';
    const isLocal = shortcut.range === 'local' || shortcut.range === 'l';
    const isWindow = _.isObject(shortcut.range);

    if (isGlobal) {
        globalShortcut.unregister(shortcut.accelerator);
    }
    else if (isLocal) {
        localShortcut.unregister(shortcut.accelerator); // broken, waiting for the module owner to fix
    }
    else if (isWindow) {
        localShortcut.unregister(shortcut.range, shortcut.accelerator);
    }

    delete shortcuts[shortcut.eventName];
}

/**
 * Listen to shortcut pressed event
 * @param {string} [eventName]
 * @param {function} callback
 */
export function onShortcutPressed(eventName, callback) {
    const hasEventName = _.isString(eventName);
    const handler = (event, accelerator, range) => callback({ name: event.name, accelerator, range });

    if (hasEventName) {
        plug.subscribe(`plug.shortcut.${eventName}`, handler);
    }
    else {
        callback = eventName;
        plug.subscribe('plug.shortcut', handler);
    }
}
