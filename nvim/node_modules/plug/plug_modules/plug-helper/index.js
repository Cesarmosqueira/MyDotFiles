import is from 'electron-is';
import electron from 'electron';
import PlugModule from 'plug-module';

const mod = new PlugModule('helper');
let _isOnline;
let helperWin;
let helperWinReady = false;
const messagesToSend = [];

mod.injectGetterAndSetterToGlobal('isOnline', isOnline);
mod.injectGetterAndSetterToGlobal('isOffline', _.negate(isOnline));

mod.addMethod('notify', notify);
mod.injectMethodsToGlobal();

mod.addMainBootstrapper(bootstrap);

function bootstrap() {
    electron.app.on('ready', () => {
        helperWin = plug.createWindow('plugHelper', {
            width: 0,
            height: 0,
            show: false,
            fromPlug: true,
            accessible: false,
        });

        helperWin.webContents.on('did-finish-load', () => {
            helperWinReady = true;

            for (const message of messagesToSend) {
                helperWin.webContents.send('plug.notify', message);
            }
        });
    });

    plug.on('plug.network.online', () => _isOnline = true);
    plug.on('plug.network.offline', () => _isOnline = false);
}

/**
 * Check if is online
 * @return {boolean}
 */
function isOnline() {
    return is.renderer() ? navigator.onLine : _isOnline;
}

/**
 * Send a H5 native notification
 * @param {Object} options - Check https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification
 * @param {string} options.title
 */
function notify(options) {
    if (is.renderer()) {
        return new Notification(options.title, options);
    }

    helperWinReady
        ? helperWin.webContents.send('plug.notify', options)
        : messagesToSend.push(options);
}

export default mod.exportModule();