import debug from 'debug';
import _ from 'lodash';
import electron from 'electron';
import is from 'electron-is';

global.plug = {};
const log = debug('plug');
const error = debug('plug:error');
const modulesToUse = [];
const plugModules = require('./plug_modules').default;
const modulesBlockingStartup = [];
let isStarted = false;

if (is.main()) {
    plug.use = (module, params) => modulesToUse.push(Object.assign(module, { params }));
}

export default function bootstrap(config) {
    if (is.main()) {
        prebootstrap();
        loadModules(config);
        applyConfig(config);
        postbootstrap(config);
    }
};

function prebootstrap() {
    electron.app.on('quit', () => {
        log('quitting...');
    });

    electron.app.on('before-quit', () => {
        for (const win of electron.BrowserWindow.getAllWindows()) {
            win.setClosable(true);
        }
    });
}

function loadModules(config) {
    modulesToUse.unshift(...plugModules.map(module => Object.assign(module, { params: config })));

    _.sortBy(modulesToUse, 'bootstrapOrder').forEach(module => {
        bootstrapModule(module, config);
    });
}

function bootstrapModule(module, config) {
    log(`loading module ${module.name}....`);
    const blockers = module.bootstrap(module.params);

    if (blockers.length) {
        log(`module "${module.name}" is preventing app to startup`);
        modulesBlockingStartup.push(...blockers);

        blockers.forEach(blocker => {
            blocker
                .then(() => {
                    _.pull(modulesBlockingStartup, blocker);
                    checkStartup(config);
                })
                .catch(err => {
                    error(`unable to bootstrap app, exit`);
                    error(`reason: ${err}`)
                    electron.app.quit();
                });
        });
    }
}

function applyConfig(config) {
    if (plug.isProd) {
        electron.app.setLoginItemSettings({
            openAtLogin: config.app.openAtLogin,
        });
    }
}

function postbootstrap(config) {
    electron.app.on('ready', () => checkStartup(config));
}

function checkStartup(config) {
    if (electron.app.isReady && modulesBlockingStartup.length === 0) {
        startup(config);
    }
}

function startup(config) {
    log('starting up....');

    checkSingleton(config);
    handleSystemEvents(config);
    createWindows(config.renderer);
}

function checkSingleton(config) {
    if (config.app.singleInstance) {
        const isDuplicate = electron.app.makeSingleInstance((commandLine, workingDirectory) => {
            plug.focus();
        });

        if (isDuplicate) {
            electron.app.quit();
        }
    }
}

function handleSystemEvents(config) {
    electron.app.on('window-all-closed', () => {
        if (!is.macOS()) {
            log('all windows are closed');
            electron.app.quit();
        }
    });

    electron.app.on('activate', () => {
        if (plug.getAllWindows().length === 0) {
            createWindows(config.renderer);
        }
    });
}

function createWindows(configs) {
    for (const key in configs) {
        configs[key]
            ? plug.createWindow(key, configs[key])
            : error(`config for window ${key} is not found`);
    }
}